//
//  FetchCategoryFiltersTool.m
//  GPUImageDemo
//
//  Created by iOS_Developer on 2019/7/9.
//  Copyright © 2019年 iOS_Developer. All rights reserved.
//

#import "FHFetchCategoryFiltersTool.h"

@implementation FHFetchCategoryFiltersTool

+ (NSArray *)colorAdjustmentsFilters {
    return @[
             @{
                 @"title": @"GPUImageBrightnessFilter",
                 @"desc": @"Adjusts the brightness of the image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"调整图像的亮度",
                 },
             @{
                 @"title": @"GPUImageExposureFilter",
                 @"desc": @"Adjusts the exposure of the image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"调整图像的曝光",
                 },
             @{
                 @"title": @"GPUImageContrastFilter",
                 @"desc": @"Adjusts the contrast of the image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"调整图像的对比度",
                 },
             @{
                 @"title": @"GPUImageSaturationFilter",
                 @"desc": @"Adjusts the saturation of an image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"调整图像的饱和度",
                 },
             @{
                 @"title": @"GPUImageGammaFilter",
                 @"desc": @"Adjusts the gamma of an image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"调整图像的灰度系数",
                 },
             @{
                 @"title": @"GPUImageLevelsFilter",
                 @"desc": @"Photoshop-like levels adjustment. The min, max, minOut and maxOut parameters are floats in the range [0, 1]. If you have parameters from Photoshop in the range [0, 255] you must first convert them to be [0, 1]. The gamma/mid parameter is a float >= 0. This matches the value from Photoshop. If you want to apply levels to RGB as well as individual channels you need to use this filter twice - first for the individual channels and then for all channels.",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @0,
                 @"translate": @"类似photoshop的级别调整。min、max、minOut和maxOut参数在范围[0，1]内浮动。如果photoshop的参数在[0，255]范围内，则必须首先将其转换为[0，1]。gamma/mid参数是float >= 0。这与photoshop的值匹配。如果要对RGB和单个通道应用级别，则需要使用此过滤器两次-首先对单个通道使用此过滤器，然后对所有通道使用此过滤器",
                 },
             @{
                 @"title": @"GPUImageColorMatrixFilter",
                 @"desc": @"Transforms the colors of an image by applying a matrix to them",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @2,
                 @"translate": @"通过对图像应用矩阵来转换图像的颜色",
                 },
             @{
                 @"title": @"GPUImageRGBFilter",
                 @"desc": @"Adjusts the individual RGB channels of an image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @3,
                 @"translate": @"调整图像的单个RGB通道",
                 },
             @{
                 @"title": @"GPUImageHueFilter",
                 @"desc": @"Adjusts the hue of an image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"调整图像的色调",
                 },
//             @{
//                 @"title": @"GPUImageVibranceFilter", // Deprecated
//                 @"desc": @"Adjusts the vibrance of an image",
//                 @"inherit": @"GPUImageFilter",
//                 @"translate": @"",
//                 },
             @{
                 @"title": @"GPUImageWhiteBalanceFilter",
                 @"desc": @"Adjusts the white balance of an image.",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @2,
                 @"translate": @"调整图像的白平衡",
                 },
             @{
                 @"title": @"GPUImageToneCurveFilter",
                 @"desc": @"Adjusts the colors of an image based on spline curves for each color channel.",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @4,
                 @"translate": @"根据每个颜色通道的样条曲线调整图像的颜色",
                 },
             @{
                 @"title": @"GPUImageHighlightShadowFilter",
                 @"desc": @"Adjusts the shadows and highlights of an image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @2,
                 @"translate": @"调整图像的阴影和高光",
                 },
//             @{
//                 @"title": @"GPUImageHighlightShadowTintFilter", // Deprecated
//                 @"desc": @"Allows you to tint the shadows and highlights of an image independently using a color and intensity",
//                 @"inherit": @"GPUImageFilter",
//                 },
             @{
                 @"title": @"GPUImageLookupFilter",
                 @"desc": @"Uses an RGB color lookup image to remap the colors in an image. First, use your favourite photo editing application to apply a filter to lookup.png from GPUImage/framework/Resources. For this to work properly each pixel color must not depend on other pixels (e.g. blur will not work). If you need a more complex filter you can create as many lookup tables as required. Once ready, use your new lookup.png file as a second input for GPUImageLookupFilter.",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @1,
                 @"translate": @"使用RGB颜色查找图像重新映射图像中的颜色。 首先，使用您最喜欢的照片编辑应用程序将过滤器应用于GPUImage/framework/Resources中的lookup.png。 为了使其正常工作，每个像素颜色必须不依赖于其他像素（例如，模糊将不起作用）。 如果需要更复杂的过滤器，可以根据需要创建任意数量的查找表。 准备好后，使用新的lookup.png文件作为GPUImageLookupFilter的第二个输入",
                 },
             @{
                 @"title": @"GPUImageAmatorkaFilter",
                 @"desc": @"A photo filter based on a Photoshop action by Amatorka: http://amatorka.deviantart.com/art/Amatorka-Action-2-121069631 . If you want to use this effect you have to add lookup_amatorka.png from the GPUImage Resources folder to your application bundle.",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @0,
                 @"translate": @"基于Amatorka的Photoshop动作的照片滤镜：http://amatorka.deviantart.com/art/Amatorka-Action-2-121069631。 如果要使用此效果，则必须将GPUImage Resources文件夹中的lookup_amatorka.png添加到应用程序包中",
                 },
             @{
                 @"title": @"GPUImageMissEtikateFilter",
                 @"desc": @"A photo filter based on a Photoshop action by Miss Etikate: http://miss-etikate.deviantart.com/art/Photoshop-Action-15-120151961 . If you want to use this effect you have to add lookup_miss_etikate.png from the GPUImage Resources folder to your application bundle.",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @0,
                 @"translate": @"基于Miss Etikate的Photoshop动作的照片滤镜：http://miss-etikate.deviantart.com/art/Photoshop-Action-15-120151961。 如果要使用此效果，则必须将GPUImage Resources文件夹中的lookup_miss_etikate.png添加到应用程序包中",
                 },
             @{
                 @"title": @"GPUImageSoftEleganceFilter",
                 @"desc": @"Another lookup-based color remapping filter. If you want to use this effect you have to add lookup_soft_elegance_1.png and lookup_soft_elegance_2.png from the GPUImage Resources folder to your application bundle.",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @0,
                 @"translate": @"另一种基于查找的颜色重新映射过滤器。 如果要使用此效果，则必须将GPUImage Resources文件夹中的lookup_soft_elegance_1.png和lookup_soft_elegance_2.png添加到应用程序包中",
                 },
//             @{
//                 @"title": @"GPUImageSkinToneFilter", // Deprecated
//                 @"desc": @"A skin-tone adjustment filter that affects a unique range of light skin-tone colors and adjusts the pink/green or pink/orange range accordingly. Default values are targetted at fair caucasian skin, but can be adjusted as required.",
//                 @"inherit": @"GPUImageFilter",
//                 },
             @{
                 @"title": @"GPUImageColorInvertFilter",
                 @"desc": @"Inverts the colors of an image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @0,
                 @"translate": @"反转图像的颜色",
                 },
             @{
                 @"title": @"GPUImageGrayscaleFilter",
                 @"desc": @"Converts an image to grayscale (a slightly faster implementation of the saturation filter, without the ability to vary the color contribution)",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @0,
                 @"translate": @"将图像转换为灰度（饱和滤镜的实现速度稍快，无法改变颜色贡献）",
                 },
             @{
                 @"title": @"GPUImageMonochromeFilter",
                 @"desc": @"Converts the image to a single-color version, based on the luminance of each pixel",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @2,
                 @"translate": @"根据每个像素的亮度将图像转换为单色版本",
                 },
             @{
                 @"title": @"GPUImageFalseColorFilter",
                 @"desc": @"Uses the luminance of the image to mix between two user-specified colors",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @2,
                 @"translate": @"使用图像的亮度在两个用户指定的颜色之间混合",
                 },
             @{
                 @"title": @"GPUImageHazeFilter",
                 @"desc": @"Used to add or remove haze (similar to a UV filter)",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @2,
                 @"translate": @"用于添加或消除雾度（类似于UV过滤器）",
                 },
             @{
                 @"title": @"GPUImageSepiaFilter",
                 @"desc": @"Simple sepia tone filter",
                 @"inherit": @"GPUImageColorMatrixFilter",
                 @"parametersNum": @0,
                 @"translate": @"简单的棕褐色调滤波器",
                 },
             @{
                 @"title": @"GPUImageOpacityFilter",
                 @"desc": @"Adjusts the alpha channel of the incoming image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"调整传入图像的alpha通道",
                 },
             @{
                 @"title": @"GPUImageSolidColorGenerator",
                 @"desc": @"This outputs a generated image with a solid color. You need to define the image size using -forceProcessingAtSize",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"这将输出具有纯色的生成图像。需要使用-forceprocessingataze定义图像大小",
                 },
             @{
                 @"title": @"GPUImageLuminanceThresholdFilter",
                 @"desc": @"Pixels with a luminance above the threshold will appear white, and those below will be black",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"亮度高于阈值的像素将显示为白色，低于阈值的像素将显示为黑色。",
                 },
             @{
                 @"title": @"GPUImageAdaptiveThresholdFilter",
                 @"desc": @"Determines the local luminance around a pixel, then turns the pixel black if it is below that local luminance and white if above. This can be useful for picking out text under varying lighting conditions.",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @1,
                 @"translate": @"确定像素周围的局部亮度，如果低于该局部亮度则将像素变为黑色，如果高于该值则变为白色。 这对于在不同光照条件下挑选文本非常有用",
                 },
             @{
                 @"title": @"GPUImageAverageLuminanceThresholdFilter",
                 @"desc": @"This applies a thresholding operation where the threshold is continually adjusted based on the average luminance of the scene",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @1,
                 @"translate": @"这将应用阈值操作，其中根据场景的平均亮度连续调整阈值",
                 },
             @{
                 @"title": @"GPUImageHistogramFilter",
                 @"desc": @"This analyzes the incoming image and creates an output histogram with the frequency at which each color value occurs. The output of this filter is a 3-pixel-high, 256-pixel-wide image with the center (vertical) pixels containing pixels that correspond to the frequency at which various color values occurred. Each color value occupies one of the 256 width positions, from 0 on the left to 255 on the right. This histogram can be generated for individual color channels (kGPUImageHistogramRed, kGPUImageHistogramGreen, kGPUImageHistogramBlue), the luminance of the image (kGPUImageHistogramLuminance), or for all three color channels at once (kGPUImageHistogramRGB).",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"这将分析传入的图像，并创建一个输出柱状图，其中包含每个颜色值发生的频率。此过滤器的输出是一个3像素高、256像素宽的图像，中心（垂直）像素包含与各种颜色值发生的频率相对应的像素。每个颜色值占据256个宽度位置中的一个，从左侧的0到右侧的255。可以为单个颜色通道（kGPUImageHistogramRed、kGPUImageHistogramGreen、kGPUImageHistogramBlue）、图像亮度（kGPUImageHistogramLuminance）或同时为所有三个颜色通道（kGPUImageHistogramRGB）生成此直方图。",
                 },
             @{
                 @"title": @"GPUImageHistogramGenerator",
                 @"desc": @"This is a special filter, in that it's primarily intended to work with the GPUImageHistogramFilter. It generates an output representation of the color histograms generated by GPUImageHistogramFilter, but it could be repurposed to display other kinds of values. It takes in an image and looks at the center (vertical) pixels. It then plots the numerical values of the RGB components in separate colored graphs in an output texture. You may need to force a size for this filter in order to make its output visible.",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @0,
                 @"translate": @"这是一个特殊的过滤器，因为它主要用于GPUImageHistogramFilter。它生成由GPUImageHistogramFilter生成的颜色直方图的输出表示，但它可以重新调整用途以显示其他类型的值。它接收图像并查看中心（垂直）像素。然后，它在输出纹理的单独彩色图形中绘制RGB分量的数值。可能需要强制此筛选器的大小以使其输出可见",
                 },
             @{
                 @"title": @"GPUImageAverageColor",
                 @"desc": @"This processes an input image and determines the average color of the scene, by averaging the RGBA components for each pixel in the image. A reduction process is used to progressively downsample the source image on the GPU, followed by a short averaging calculation on the CPU. The output from this filter is meaningless, but you need to set the colorAverageProcessingFinishedBlock property to a block that takes in four color components and a frame time and does something with them.",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @0,
                 @"translate": @"这处理输入图像并通过平均图像中每个像素的RGBA分量来确定场景的平均颜色。 缩减过程用于逐步下采样GPU上的源图像，然后在CPU上进行短平均计算。 此过滤器的输出没有意义，但您需要将colorAverageProcessingFinishedBlock属性设置为一个块，该块接受四个颜色分量和一个帧时间并对它们执行某些操作",
                 },
             @{
                 @"title": @"GPUImageLuminosity",
                 @"desc": @"Like the GPUImageAverageColor, this reduces an image to its average luminosity. You need to set the luminosityProcessingFinishedBlock to handle the output of this filter, which just returns a luminosity value and a frame time.",
                 @"inherit": @"GPUImageAverageColor",
                 @"parametersNum": @0,
                 @"translate": @"与GPUImageAverageColor类似，这会将图像缩小到平均亮度。 你需要设置luminosityProcessingFinishedBlock来处理这个过滤器的输出，它只返回一个发光度值和一个帧时间",
                 },
             @{
                 @"title": @"GPUImageChromaKeyFilter",
                 @"desc": @"For a given color in the image, sets the alpha channel to 0. This is similar to the GPUImageChromaKeyBlendFilter, only instead of blending in a second image for a matching color this doesn't take in a second image and just turns a given color transparent.",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @2,
                 @"translate": @"对于图像中的给定颜色，将alpha通道设置为0.这类似于GPUImageChromaKeyBlendFilter，而不是在第二个图像中混合匹配颜色，这不会占用第二个图像，只是将给定颜色变为透明",
                 },
             ];
}

+ (NSArray *)imageProcessingFilters {
    return @[
             @{
                 @"title": @"GPUImageTransformFilter",
                 @"desc": @"This applies an arbitrary 2-D or 3-D transformation to an image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @3,
                 @"translate": @"这适用于图像的任意2-D或3-D变换",
                 },
             @{
                 @"title": @"GPUImageCropFilter",
                 @"desc": @"This crops an image to a specific region, then passes only that region on to the next stage in the filter",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"这会将图像裁剪到特定区域，然后仅将该区域传递到过滤器中的下一个阶段",
                 },
             @{
                 @"title": @"GPUImageLanczosResamplingFilter",
                 @"desc": @"This lets you up- or downsample an image using Lanczos resampling, which results in noticeably better quality than the standard linear or trilinear interpolation. Simply use -forceProcessingAtSize: to set the target output resolution for the filter, and the image will be resampled for that new size.",
                 @"inherit": @"GPUImageTwoPassTextureSamplingFilter",
                 @"parametersNum": @0,
                 @"translate": @"这使您可以使用Lanczos重采样对图像进行上采样或下采样，从而比标准线性或三线性插值产生明显更好的质量。 只需使用-forceProcessingAtSize：设置过滤器的目标输出分辨率，然后对该新大小重新采样图像",
                 },
             @{
                 @"title": @"GPUImageSharpenFilter",
                 @"desc": @"Sharpens the image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"锐化图像",
                 },
             @{
                 @"title": @"GPUImageUnsharpMaskFilter",
                 @"desc": @"Applies an unsharp mask",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @2,
                 @"translate": @"应用非锐化蒙版",
                 },
             @{
                 @"title": @"GPUImageGaussianBlurFilter",
                 @"desc": @"A hardware-optimized, variable-radius Gaussian blur",
                 @"inherit": @"GPUImageTwoPassTextureSamplingFilter",
                 @"parametersNum": @5,
                 @"translate": @"硬件优化的可变半径高斯模糊",
                 },
             @{
                 @"title": @"GPUImageBoxBlurFilter",
                 @"desc": @"A hardware-optimized, variable-radius box blur",
                 @"inherit": @"GPUImageGaussianBlurFilter",
                 @"parametersNum": @5,
                 @"translate": @"硬件优化的可变半径框模糊",
                 },
             @{
                 @"title": @"GPUImageSingleComponentGaussianBlurFilter",
                 @"desc": @"A modification of the GPUImageGaussianBlurFilter that operates only on the red component",
                 @"inherit": @"GPUImageGaussianBlurFilter",
                 @"parametersNum": @5,
                 @"translate": @"GPUImageGaussianBlurFilter的修改，仅对红色组件进行操作",
                 },
             @{
                 @"title": @"GPUImageGaussianSelectiveBlurFilter",
                 @"desc": @"A Gaussian blur that preserves focus within a circular region",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @5,
                 @"translate": @"高斯模糊，保持圆形区域内的焦点",
                 },
             @{
                 @"title": @"GPUImageGaussianBlurPositionFilter",
                 @"desc": @"The inverse of the GPUImageGaussianSelectiveBlurFilter, applying the blur only within a certain circle",
                 @"inherit": @"GPUImageTwoPassTextureSamplingFilter",
                 @"parametersNum": @3,
                 @"translate": @"GPUImageGaussianSelectiveBlurFilter的反转，仅在特定圆圈内应用模糊",
                 },
             @{
                 @"title": @"GPUImageiOSBlurFilter",
                 @"desc": @"An attempt to replicate the background blur used on iOS 7 in places like the control center.",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @3,
                 @"translate": @"试图在控制中心等地方复制iOS 7上使用的背景模糊",
                 },
             @{
                 @"title": @"GPUImageMedianFilter",
                 @"desc": @"Takes the median value of the three color components, over a 3x3 area",
                 @"inherit": @"GPUImage3x3TextureSamplingFilter",
                 @"parametersNum": @0,
                 @"translate": @"获取三个颜色分量的中值，超过3x3区域",
                 },
             @{
                 @"title": @"GPUImageBilateralFilter",
                 @"desc": @"A bilateral blur, which tries to blur similar color values while preserving sharp edges",
                 @"inherit": @"GPUImageGaussianBlurFilter",
                 @"parametersNum": @2,
                 @"translate": @"双边模糊，试图模糊相似的颜色值，同时保留锐边",
                 },
             @{
                 @"title": @"GPUImageTiltShiftFilter",
                 @"desc": @"A simulated tilt shift lens effect",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @4,
                 @"translate": @"模拟倾斜移位镜头效果",
                 },
             @{
                 @"title": @"GPUImage3x3ConvolutionFilter",
                 @"desc": @"Runs a 3x3 convolution kernel against the image",
                 @"inherit": @"GPUImage3x3TextureSamplingFilter",
                 @"parametersNum": @1,
                 @"translate": @"对图像运行3x3卷积内核",
                 },
             @{
                 @"title": @"GPUImageSobelEdgeDetectionFilter",
                 @"desc": @"Sobel edge detection, with edges highlighted in white",
                 @"inherit": @"GPUImageTwoPassFilter",
                 @"parametersNum": @3,
                 @"translate": @"Sobel边缘检测，边缘以白色突出显示",
                 },
             @{
                 @"title": @"GPUImagePrewittEdgeDetectionFilter",
                 @"desc": @"Prewitt edge detection, with edges highlighted in white",
                 @"inherit": @"GPUImageSobelEdgeDetectionFilter",
                 @"parametersNum": @3,
                 @"translate": @"Prewitt边缘检测，边缘以白色突出显示",
                 },
             @{
                 @"title": @"GPUImageThresholdEdgeDetectionFilter",
                 @"desc": @"Performs Sobel edge detection, but applies a threshold instead of giving gradual strength values",
                 @"inherit": @"GPUImageSobelEdgeDetectionFilter",
                 @"parametersNum": @4,
                 @"translate": @"执行Sobel边缘检测，但应用阈值而不是提供渐变强度值",
                 },
             @{
                 @"title": @"GPUImageCannyEdgeDetectionFilter",
                 @"desc": @"This uses the full Canny process to highlight one-pixel-wide edges",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @6,
                 @"translate": @"这使用完整的Canny过程来突出显示一个像素宽的边缘",
                 },
             @{
                 @"title": @"GPUImageHarrisCornerDetectionFilter",
                 @"desc": @"Runs the Harris corner detection algorithm on an input image, and produces an image with those corner points as white pixels and everything else black. The cornersDetectedBlock can be set, and you will be provided with a list of corners (in normalized 0..1 X, Y coordinates) within that callback for whatever additional operations you want to perform.",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @3,
                 @"translate": @"在输入图像上运行Harris角点检测算法，并生成一个图像，其中这些角点为白色像素，其他一切为黑色。 可以设置cornersDetectedBlock，并为您提供一个角落列表（在规范化的0..1 X，Y坐标中），用于您要执行的任何其他操作",
                 },
             @{
                 @"title": @"GPUImageNobleCornerDetectionFilter",
                 @"desc": @"Runs the Noble variant on the Harris corner detector. It behaves as described above for the Harris detector.",
                 @"inherit": @"GPUImageHarrisCornerDetectionFilter",
                 @"parametersNum": @3,
                 @"translate": @"在Harris角点探测器上运行Noble变体。 其行为如上所述用于Harris检测器",
                 },
//             @{
//                 @"title": @"GPUImageShiTomasiCornerDetectionFilter", // Deprecated
//                 @"desc": @"Runs the Shi-Tomasi feature detector. It behaves as described above for the Harris detector.",
//                 @"inherit": @"GPUImageFilter",
//                 },
             @{
                 @"title": @"GPUImageNonMaximumSuppressionFilter",
                 @"desc": @"Currently used only as part of the Harris corner detection filter, this will sample a 1-pixel box around each pixel and determine if the center pixel's red channel is the maximum in that area. If it is, it stays. If not, it is set to 0 for all color components.",
                 @"inherit": @"GPUImage3x3TextureSamplingFilter",
                 @"parametersNum": @0,
                 @"translate": @"目前仅用作Harris角点检测滤波器的一部分，这将在每个像素周围采样1个像素的盒子，并确定中心像素的红色通道是否是该区域中的最大值。 如果是，它就会停留。 如果不是，则对所有颜色分量设置为0",
                 },
             @{
                 @"title": @"GPUImageXYDerivativeFilter",
                 @"desc": @"An internal component within the Harris corner detection filter, this calculates the squared difference between the pixels to the left and right of this one, the squared difference of the pixels above and below this one, and the product of those two differences.",
                 @"inherit": @"GPUImageSobelEdgeDetectionFilter",
                 @"parametersNum": @0,
                 @"translate": @"Harris角点检测滤波器中的内部组件，它计算这一点左右像素之间的平方差，这个像素上下的像素的平方差，以及这两个差异的乘积",
                 },
             @{
                 @"title": @"GPUImageCrosshairGenerator",
                 @"desc": @"This draws a series of crosshairs on an image, most often used for identifying machine vision features. It does not take in a standard image like other filters, but a series of points in its -renderCrosshairsFromArray:count: method, which does the actual drawing. You will need to force this filter to render at the particular output size you need.",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"这在图像上绘制了一系列十字准线，最常用于识别机器视觉特征。 它不像其他滤镜那样采用标准图像，而是采用-renderCrosshairsFromArray：count：方法中的一系列点来完成实际绘制。 您需要强制此过滤器以您需要的特定输出大小进行渲染",
                 },
             @{
                 @"title": @"GPUImageDilationFilter",
                 @"desc": @"This performs an image dilation operation, where the maximum intensity of the red channel in a rectangular neighborhood is used for the intensity of this pixel. The radius of the rectangular area to sample over is specified on initialization, with a range of 1-4 pixels. This is intended for use with grayscale images, and it expands bright regions.",
                 @"inherit": @"GPUImageTwoPassTextureSamplingFilter",
                 @"parametersNum": @0,
                 @"translate": @"这执行图像扩张操作，其中矩形邻域中的红色通道的最大强度用于该像素的强度。 要采样的矩形区域的半径在初始化时指定，范围为1-4像素。 这适用于灰度图像，并可扩展明亮区域",
                 },
             @{
                 @"title": @"GPUImageRGBDilationFilter",
                 @"desc": @"This is the same as the GPUImageDilationFilter, except that this acts on all color channels, not just the red channel.",
                 @"inherit": @"GPUImageTwoPassTextureSamplingFilter",
                 @"parametersNum": @0,
                 @"translate": @"这与GPUImageDilationFilter相同，只是它作用于所有颜色通道，而不仅仅是红色通道",
                 },
             @{
                 @"title": @"GPUImageErosionFilter",
                 @"desc": @"This performs an image erosion operation, where the minimum intensity of the red channel in a rectangular neighborhood is used for the intensity of this pixel. The radius of the rectangular area to sample over is specified on initialization, with a range of 1-4 pixels. This is intended for use with grayscale images, and it expands dark regions.",
                 @"inherit": @"GPUImageTwoPassTextureSamplingFilter",
                 @"parametersNum": @0,
                 @"translate": @"这执行图像侵蚀操作，其中矩形邻域中的红色通道的最小强度用于该像素的强度。 要采样的矩形区域的半径在初始化时指定，范围为1-4像素。 这适用于灰度图像，并可扩展暗区",
                 },
             @{
                 @"title": @"GPUImageRGBErosionFilter",
                 @"desc": @"This is the same as the GPUImageErosionFilter, except that this acts on all color channels, not just the red channel.",
                 @"inherit": @"GPUImageTwoPassTextureSamplingFilter",
                 @"parametersNum": @0,
                 @"translate": @"这与GPUImageErosionFilter相同，只是它作用于所有颜色通道，而不仅仅是红色通道",
                 },
             @{
                 @"title": @"GPUImageOpeningFilter",
                 @"desc": @"This performs an erosion on the red channel of an image, followed by a dilation of the same radius. The radius is set on initialization, with a range of 1-4 pixels. This filters out smaller bright regions.",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @0,
                 @"translate": @"这会对图像的红色通道进行侵蚀，然后进行相同半径的扩张。 半径在初始化时设置，范围为1-4像素。 这会过滤掉较小的明亮区域",
                 },
             @{
                 @"title": @"GPUImageRGBOpeningFilter",
                 @"desc": @"This is the same as the GPUImageOpeningFilter, except that this acts on all color channels, not just the red channel.",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @0,
                 @"translate": @"这与GPUImageOpeningFilter相同，只是它作用于所有颜色通道，而不仅仅是红色通道",
                 },
             @{
                 @"title": @"GPUImageClosingFilter",
                 @"desc": @"This performs a dilation on the red channel of an image, followed by an erosion of the same radius. The radius is set on initialization, with a range of 1-4 pixels. This filters out smaller dark regions.",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @0,
                 @"translate": @"这在图像的红色通道上进行扩张，然后对相同半径进行侵蚀。 半径在初始化时设置，范围为1-4像素。 这会滤除较小的暗区",
                 },
             @{
                 @"title": @"GPUImageRGBClosingFilter",
                 @"desc": @"This is the same as the GPUImageClosingFilter, except that this acts on all color channels, not just the red channel.",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @0,
                 @"translate": @"这与GPUImageClosingFilter相同，不同之处在于它对所有颜色通道起作用，而不仅仅是红色通道",
                 },
             @{
                 @"title": @"GPUImageLocalBinaryPatternFilter",
                 @"desc": @"This performs a comparison of intensity of the red channel of the 8 surrounding pixels and that of the central one, encoding the comparison results in a bit string that becomes this pixel intensity. The least-significant bit is the top-right comparison, going counterclockwise to end at the right comparison as the most significant bit.",
                 @"inherit": @"GPUImage3x3TextureSamplingFilter",
                 @"parametersNum": @0,
                 @"translate": @"这执行8个周围像素的红色通道的强度与中心像素的红色通道的强度的比较，将比较结果编码为变为该像素强度的位串。 最低有效位是右上角比较，逆时针方向以正确比较结束为最高位",
                 },
             @{
                 @"title": @"GPUImageLowPassFilter",
                 @"desc": @"This applies a low pass filter to incoming video frames. This basically accumulates a weighted rolling average of previous frames with the current ones as they come in. This can be used to denoise video, add motion blur, or be used to create a high pass filter.",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @1,
                 @"translate": @"这将低通滤波器应用于输入视频帧。 这基本上累积了先前帧的加权滚动平均值和当前帧的加权滚动平均值。这可以用于去噪视频，添加运动模糊或用于创建高通滤波器",
                 },
             @{
                 @"title": @"GPUImageHighPassFilter",
                 @"desc": @"This applies a high pass filter to incoming video frames. This is the inverse of the low pass filter, showing the difference between the current frame and the weighted rolling average of previous ones. This is most useful for motion detection.",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @1,
                 @"translate": @"这将高通滤波器应用于输入视频帧。 这是低通滤波器的反函数，显示当前帧与先前帧的加权滚动平均值之间的差异。 这对于运动检测最有用",
                 },
             @{
                 @"title": @"GPUImageMotionDetector",
                 @"desc": @"This is a motion detector based on a high-pass filter. You set the motionDetectionBlock and on every incoming frame it will give you the centroid of any detected movement in the scene (in normalized X,Y coordinates) as well as an intensity of motion for the scene.",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @1,
                 @"translate": @"这是一种基于高通滤波器的运动检测器。 您设置了motionDetectionBlock，并且在每个传入的帧上，它将为您提供场景中任何检测到的移动的质心（在标准化的X，Y坐标中）以及场景的运动强度",
                 },
             @{
                 @"title": @"GPUImageHoughTransformLineDetector",
                 @"desc": @"Detects lines in the image using a Hough transform into parallel coordinate space. This approach is based entirely on the PC lines process developed by the Graph@FIT research group at the Brno University of Technology and described in their publications: M. Dubská, J. Havel, and A. Herout. Real-Time Detection of Lines using Parallel Coordinates and OpenGL. Proceedings of SCCG 2011, Bratislava, SK, p. 7 (http://medusa.fit.vutbr.cz/public/data/papers/2011-SCCG-Dubska-Real-Time-Line-Detection-Using-PC-and-OpenGL.pdf) and M. Dubská, J. Havel, and A. Herout. PClines — Line detection using parallel coordinates. 2011 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), p. 1489- 1494 (http://medusa.fit.vutbr.cz/public/data/papers/2011-CVPR-Dubska-PClines.pdf).",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @3,
                 @"translate": @"使用Hough变换检测图像中的线到平行坐标空间。 这种方法完全基于布尔诺理工大学Graph @ FIT研究小组开发的PC线工艺，并在其出版物中描述：M.Dubská，J。Havel和A. Herout。 使用平行坐标和OpenGL实时检测线条。 2011年SCCG会议记录，Bratislava，SK，p。 7（http://medusa.fit.vutbr.cz/public/data/papers/2011-SCCG-Dubska-Real-Time-Line-Detection-Using-PC-and-OpenGL.pdf）和M.Dibská，J. Havel和A. Herout。 PClines  - 使用平行坐标的线检测。 2011年IEEE计算机视觉和模式识别会议（CVPR），p。 1489-1494（http://medusa.fit.vutbr.cz/public/data/papers/2011-CVPR-Dubska-PClines.pdf）",
                 },
             @{
                 @"title": @"GPUImageLineGenerator",
                 @"desc": @"A helper class that generates lines which can overlay the scene. The color of these lines can be adjusted using -setLineColorRed:green:blue:",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"生成可以覆盖场景的线的辅助类。 可以使用-setLineColorRed:green:blue:调整这些线条的颜色",
                 },
             @{
                 @"title": @"GPUImageMotionBlurFilter",
                 @"desc": @"Applies a directional motion blur to an image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @2,
                 @"translate": @"对图像应用定向运动模糊",
                 },
             @{
                 @"title": @"GPUImageZoomBlurFilter",
                 @"desc": @"Applies a directional motion blur to an image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @2,
                 @"translate": @"对图像应用方向运动模糊",
                 },
             ];
}

+ (NSArray *)blendingModesFilters {
    return @[
             @{
                 @"title": @"GPUImageChromaKeyBlendFilter",
                 @"desc": @"Selectively replaces a color in the first image with the second image",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @2,
                 @"translate": @"有选择地将第一个图像中的颜色替换为第二个图像",
                 },
             @{
                 @"title": @"GPUImageDissolveBlendFilter",
                 @"desc": @"Applies a dissolve blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @1,
                 @"translate": @"应用两个图像的融合",
                 },
             @{
                 @"title": @"GPUImageMultiplyBlendFilter",
                 @"desc": @"Applies a multiply blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的多重混合",
                 },
             @{
                 @"title": @"GPUImageAddBlendFilter",
                 @"desc": @"Applies an additive blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的加法混合",
                 },
             @{
                 @"title": @"GPUImageSubtractBlendFilter",
                 @"desc": @"Applies a subtractive blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"",
                 },
             @{
                 @"title": @"GPUImageDivideBlendFilter",
                 @"desc": @"Applies a division blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的减法混合",
                 },
             @{
                 @"title": @"GPUImageOverlayBlendFilter",
                 @"desc": @"Applies an overlay blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的重叠混合",
                 },
             @{
                 @"title": @"GPUImageDarkenBlendFilter",
                 @"desc": @"Blends two images by taking the minimum value of each color component between the images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"通过在图像之间获取每个颜色分量的最小值来混合两个图像",
                 },
             @{
                 @"title": @"GPUImageLightenBlendFilter",
                 @"desc": @"Blends two images by taking the maximum value of each color component between the images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"通过在图像之间获取每个颜色分量的最大值来混合两个图像",
                 },
             @{
                 @"title": @"GPUImageColorBurnBlendFilter",
                 @"desc": @"Applies a color burn blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的彩色混合",
                 },
             @{
                 @"title": @"GPUImageColorDodgeBlendFilter",
                 @"desc": @"Applies a color dodge blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的颜色躲闪混合",
                 },
             @{
                 @"title": @"GPUImageScreenBlendFilter",
                 @"desc": @"Applies a screen blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的屏幕混合",
                 },
             @{
                 @"title": @"GPUImageExclusionBlendFilter",
                 @"desc": @"Applies an exclusion blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的排除混合",
                 },
             @{
                 @"title": @"GPUImageDifferenceBlendFilter",
                 @"desc": @"Applies a difference blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的差异混合",
                 },
             @{
                 @"title": @"GPUImageHardLightBlendFilter",
                 @"desc": @"Applies a hard light blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的强光混合",
                 },
             @{
                 @"title": @"GPUImageSoftLightBlendFilter",
                 @"desc": @"Applies a soft light blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的柔和光混合",
                 },
             @{
                 @"title": @"GPUImageAlphaBlendFilter",
                 @"desc": @"Blends the second image over the first, based on the second's alpha channel",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @1,
                 @"translate": @"基于第二个alpha通道将第二个图像混合在第一个图像上",
                 },
             @{
                 @"title": @"GPUImageSourceOverBlendFilter",
                 @"desc": @"Applies a source over blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"将源应用于两个图像的混合",
                 },
             @{
                 @"title": @"GPUImageNormalBlendFilter",
                 @"desc": @"Applies a normal blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的正常混合",
                 },
             @{
                 @"title": @"GPUImageColorBlendFilter",
                 @"desc": @"Applies a color blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的颜色混合",
                 },
             @{
                 @"title": @"GPUImageHueBlendFilter",
                 @"desc": @"Applies a hue blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的色调混合",
                 },
             @{
                 @"title": @"GPUImageSaturationBlendFilter",
                 @"desc": @"Applies a saturation blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的饱和度混合",
                 },
             @{
                 @"title": @"GPUImageLuminosityBlendFilter",
                 @"desc": @"Applies a luminosity blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的光度混合",
                 },
             @{
                 @"title": @"GPUImageLinearBurnBlendFilter",
                 @"desc": @"Applies a linear burn blend of two images",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"应用两个图像的线性刻录混合",
                 },
             @{
                 @"title": @"GPUImagePoissonBlendFilter",
                 @"desc": @"Applies a Poisson blend of two images",
                 @"inherit": @"GPUImageTwoInputCrossTextureSamplingFilter",
                 @"parametersNum": @2,
                 @"translate": @"应用两个图像的泊松混合",
                 },
             @{
                 @"title": @"GPUImageMaskFilter",
                 @"desc": @"Masks one image using another",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"使用另一个图像掩盖一个图像",
                 },
             ];
}

+ (NSArray *)visualEffectsFilters {
    return @[
             @{
                 @"title": @"GPUImagePixellateFilter",
                 @"desc": @"Applies a pixellation effect on an image or video",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"对图像或视频应用像素化效果",
                 },
             @{
                 @"title": @"GPUImagePolarPixellateFilter",
                 @"desc": @"Applies a pixellation effect on an image or video, based on polar coordinates instead of Cartesian ones",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @2,
                 @"translate": @"基于极坐标而不是笛卡尔坐标对图像或视频应用像素化效果",
                 },
             @{
                 @"title": @"GPUImagePolkaDotFilter",
                 @"desc": @"Breaks an image up into colored dots within a regular grid",
                 @"inherit": @"GPUImagePixellateFilter",
                 @"parametersNum": @2,
                 @"translate": @"将图像分解为常规网格中的彩色点",
                 },
             @{
                 @"title": @"GPUImageHalftoneFilter",
                 @"desc": @"Applies a halftone effect to an image, like news print",
                 @"inherit": @"GPUImagePixellateFilter",
                 @"parametersNum": @1,
                 @"translate": @"对图像应用半色调效果，如新闻打印",
                 },
             @{
                 @"title": @"GPUImageCrosshatchFilter",
                 @"desc": @"This converts an image into a black-and-white crosshatch pattern",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @2,
                 @"translate": @"这将图像转换为黑白交叉线图案",
                 },
             @{
                 @"title": @"GPUImageSketchFilter",
                 @"desc": @"Converts video to look like a sketch. This is just the Sobel edge detection filter with the colors inverted",
                 @"inherit": @"GPUImageSobelEdgeDetectionFilter",
                 @"parametersNum": @3,
                 @"translate": @"将视频转换为草图。 这只是Sobel边缘检测滤波器，颜色反转",
                 },
             @{
                 @"title": @"GPUImageThresholdSketchFilter",
                 @"desc": @"Same as the sketch filter, only the edges are thresholded instead of being grayscale",
                 @"inherit": @"GPUImageThresholdEdgeDetectionFilter",
                 @"parametersNum": @4,
                 @"translate": @"与草图过滤器相同，只有边缘是阈值而不是灰度",
                 },
             @{
                 @"title": @"GPUImageToonFilter",
                 @"desc": @"This uses Sobel edge detection to place a black border around objects, and then it quantizes the colors present in the image to give a cartoon-like quality to the image.",
                 @"inherit": @"GPUImage3x3TextureSamplingFilter",
                 @"parametersNum": @4,
                 @"translate": @"这使用Sobel边缘检测在物体周围放置黑色边框，然后量化图像中存在的颜色，为图像提供类似卡通的质量",
                 },
             @{
                 @"title": @"GPUImageSmoothToonFilter",
                 @"desc": @"This uses a similar process as the GPUImageToonFilter, only it precedes the toon effect with a Gaussian blur to smooth out noise.",
                 @"inherit": @"GPUImageFilterGroup",
                 @"parametersNum": @5,
                 @"translate": @"这使用与GPUImageToonFilter类似的过程，只有它在香椿效果之前，用高斯模糊来消除噪音",
                 },
             @{
                 @"title": @"GPUImageEmbossFilter",
                 @"desc": @"Applies an embossing effect on the image",
                 @"inherit": @"GPUImage3x3ConvolutionFilter",
                 @"parametersNum": @1,
                 @"translate": @"对图像应用浮雕效果",
                 },
             @{
                 @"title": @"GPUImagePosterizeFilter",
                 @"desc": @"This reduces the color dynamic range into the number of steps specified, leading to a cartoon-like simple shading of the image.",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"这将颜色动态范围缩小为指定的步数，从而产生类似卡通的图像简单阴影",
                 },
             @{
                 @"title": @"GPUImageSwirlFilter",
                 @"desc": @"Creates a swirl distortion on the image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @3,
                 @"translate": @"在图像上创建漩涡扭曲",
                 },
             @{
                 @"title": @"GPUImageBulgeDistortionFilter",
                 @"desc": @"Creates a bulge distortion on the image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @3,
                 @"translate": @"在图像上创建凸起扭曲",
                 },
             @{
                 @"title": @"GPUImagePinchDistortionFilter",
                 @"desc": @"Creates a pinch distortion of the image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @3,
                 @"translate": @"创建图像的捏合扭曲",
                 },
             @{
                 @"title": @"GPUImageStretchDistortionFilter",
                 @"desc": @"Creates a stretch distortion of the image",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"创建图像的拉伸扭曲",
                 },
             @{
                 @"title": @"GPUImageSphereRefractionFilter",
                 @"desc": @"Simulates the refraction through a glass sphere",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @3,
                 @"translate": @"模拟玻璃球体的折射",
                 },
             @{
                 @"title": @"GPUImageGlassSphereFilter",
                 @"desc": @"Same as the GPUImageSphereRefractionFilter, only the image is not inverted and there's a little bit of frosting at the edges of the glass",
                 @"inherit": @"GPUImageSphereRefractionFilter",
                 @"parametersNum": @3,
                 @"translate": @"与GPUImageSphereRefractionFilter相同，只有图像没有倒置，玻璃边缘有一点点结霜",
                 },
             @{
                 @"title": @"GPUImageVignetteFilter",
                 @"desc": @"Performs a vignetting effect, fading out the image at the edges",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @4,
                 @"translate": @"执行渐晕效果，淡化边缘的图像",
                 },
             @{
                 @"title": @"GPUImageKuwaharaFilter",
                 @"desc": @"Kuwahara image abstraction, drawn from the work of Kyprianidis, et. al. in their publication \"Anisotropic Kuwahara Filtering on the GPU\" within the GPU Pro collection. This produces an oil-painting-like image, but it is extremely computationally expensive, so it can take seconds to render a frame on an iPad 2. This might be best used for still images.",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @1,
                 @"translate": @"Kuwahara图像抽象，来自Kyprianidis等人的工作。 在他们的出版物在你GPU Pro集合中的“GPU上的各向异性Kuwahara过滤”中。 这会产生类似油画的图像，但它的计算成本非常高，因此在iPad 2上渲染帧可能需要几秒钟。这可能最适合用于静止图像",
                 },
             @{
                 @"title": @"GPUImageKuwaharaRadius3Filter",
                 @"desc": @"A modified version of the Kuwahara filter, optimized to work over just a radius of three pixels",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @0,
                 @"translate": @"Kuwahara滤波器的修改版本，经过优化，仅适用于三个像素的半径",
                 },
             @{
                 @"title": @"GPUImagePerlinNoiseFilter",
                 @"desc": @"Generates an image full of Perlin noise",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @3,
                 @"translate": @"生成一个充满Perlin噪音的图像",
                 },
             @{
                 @"title": @"GPUImageCGAColorspaceFilter",
                 @"desc": @"Simulates the colorspace of a CGA monitor",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @0,
                 @"translate": @"模拟CGA监视器的色彩空间",
                 },
             @{
                 @"title": @"GPUImageMosaicFilter",
                 @"desc": @"This filter takes an input tileset, the tiles must ascend in luminance. It looks at the input image and replaces each display tile with an input tile according to the luminance of that tile. The idea was to replicate the ASCII video filters seen in other apps, but the tileset can be anything.",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @4,
                 @"translate": @"此滤镜采用输入图块集，图块必须以亮度上升。 它查看输入图像并根据该图块的亮度用输入图块替换每个显示图块。 这个想法是复制其他应用程序中看到的ASCII视频过滤器，但是tileset可以是任何东西",
                 },
             @{
                 @"title": @"GPUImageJFAVoronoiFilter",
                 @"desc": @"Generates a Voronoi map, for use in a later stage.",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @0,
                 @"translate": @"生成Voronoi映射，以便在以后的阶段使用",
                 },
             @{
                 @"title": @"GPUImageVoronoiConsumerFilter",
                 @"desc": @"Takes in the Voronoi map, and uses that to filter an incoming image.",
                 @"inherit": @"GPUImageTwoInputFilter",
                 @"parametersNum": @0,
                 @"translate": @"接收Voronoi地图，并使用它来过滤传入的图像",
                 },
             ];
}

+ (NSArray *)customFilters {
    return @[
                @{
                     @"title": @"GPUImageCustom9SplitScreenFilter",
                     @"desc": @"",
                     @"inherit": @"GPUImageFilter",
                     @"parametersNum": @0,
                     @"translate": @"9分屏效果",
                 },
                @{
                    @"title": @"GPUImageBeautifyFilter",
                    @"desc": @"",
                    @"inherit": @"GPUImageFilterGroup",
                    @"parametersNum": @0,
                    @"translate": @"美颜效果",
                    },
                @{
                    @"title": @"GPUImageBeautifyBFilter",
                    @"desc": @"",
                    @"inherit": @"GPUImageFilter",
                    @"parametersNum": @3,
                    @"translate": @"美颜效果",
                    },
                @{
                    @"title": @"GPUImageCustomGlitchFilter",
                    @"desc": @"",
                    @"inherit": @"GPUImageFilter",
                    @"parametersNum": @1,
                    @"translate": @"毛刺效果",
                    },
                @{
                    @"title": @"GPUImageCustomScaleFilter",
                    @"desc": @"",
                    @"inherit": @"GPUImageFilter",
                    @"parametersNum": @1,
                    @"translate": @"灵魂出窍效果",
                    },
                @{
                    @"title": @"GPUImageCustomShakeFilter",
                    @"desc": @"",
                    @"inherit": @"GPUImageFilter",
                    @"parametersNum": @1,
                    @"translate": @"抖动效果",
                    },
                @{
                    @"title": @"GPUImageCustomFlashWhiteFilter",
                    @"desc": @"",
                    @"inherit": @"GPUImageFilter",
                    @"parametersNum": @1,
                    @"translate": @"闪白效果",
                    },
//                @{  // 此滤镜有问题，效果出不来
//                    @"title": @"GPUImageCustomIllusionFilter",
//                    @"desc": @"",
//                    @"inherit": @"GPUImageFilter",
//                    @"parametersNum": @1,
//                    @"translate": @"闪白效果",
//                    },
             ];
}

+ (NSArray *)makeupFilters {
    return @[
             @{
                 @"title": @"GPUImageCustomMaskFilter",
                 @"desc": @"makeup",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @0,
                 @"translate": @"",
                 },
             @{
                 @"title": @"GPUImageCustomFeaturePointsFilter",
                 @"desc": @"feature points",
                 @"inherit": @"GPUImageFilter",
                 @"parametersNum": @0,
                 @"translate": @"",
                 },
             ];
}

@end
